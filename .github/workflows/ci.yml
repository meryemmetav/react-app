name: Deploy to production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get the image digest for the "latest" tag
        id: get-latest-image
        run: |
          TAG_TO_DELETE="latest"
          IMAGES=$(aws ecr describe-images --repository-name dockerrepo --query "imageDetails[?contains(imageTags, '$TAG_TO_DELETE')].[imageDigest]" --output json)
          echo "::set-output name=IMAGE_DIGEST::${IMAGES:-}"

      - name: Delete the image with the "latest" tag
        if: steps.get-latest-image.outputs.IMAGE_DIGEST
        run: |
          IMAGE_DIGESTS=$(echo ${{ steps.get-latest-image.outputs.IMAGE_DIGEST }} | jq -r '.[]')
          if [ -n "$IMAGE_DIGESTS" ]; then
            aws ecr batch-delete-image --repository-name dockerrepo --image-ids $IMAGE_DIGESTS
          else
            echo "No images found with the 'latest' tag to delete."
          fi

      - name: Build, tag, and push image to Amazon ECR with "latest" tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dockerrepo
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
